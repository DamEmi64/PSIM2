/*
 * Aplikacja
 *
 * Społecznościowy system informowania o cenach paliw. 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations.Schema;

namespace WebApplication2.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class History : IEquatable<History>
    { 
        /// <summary>
        /// Commented station
        /// </summary>
        /// <value>Commented station</value>
        [Key]
        public int ID { get; set; }
        [Required]
        [DataMember(Name="Station_ID")]
        public Station Station { get; set; }
        /// <summary>
        /// Users key
        /// </summary>
        /// <value>Users key</value>
        [Required]
        [DataMember(Name="User_ID")]
        public User User { get; set; }
        /// <summary>
        /// Fuel avaliability key
        /// </summary>
        /// <value>Fuel avaliability key</value>
        [Required]
        
        [DataMember(Name= "FuelAvaliabilityID")]
        public FuelAvaliability FuelAvaliability { get; set; }

        /// <summary>
        /// Fuel prize
        /// </summary>
        /// <value>Fuel prize</value>

        [DataMember(Name="Prize_95")]
        public decimal? Prize95 { get; set; }

        /// <summary>
        /// Fuel prize
        /// </summary>
        /// <value>Fuel prize</value>

        [DataMember(Name="Prize_98")]
        public decimal? Prize98 { get; set; }

        /// <summary>
        /// Fuel prize
        /// </summary>
        /// <value>Fuel prize</value>

        [DataMember(Name="Prize_LPG")]
        public decimal? PrizeLPG { get; set; }

        /// <summary>
        /// Fuel prize
        /// </summary>
        /// <value>Fuel prize</value>

        [DataMember(Name="Prize_Diesel")]
        public decimal? PrizeDiesel { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>

        [MinLength(8)]
        [DataMember(Name="Date")]
        public string Date { get; set; }

        /// <summary>
        /// Fuel grade key
        /// </summary>
        /// <value>Fuel grade key</value>

        [DataMember(Name="Fuel_grade_ID")]
        public FuelGrade FuelGrade { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class History {\n");
            sb.Append("  StationID: ").Append(Station).Append("\n");
            sb.Append("  UserID: ").Append(User).Append("\n");
            sb.Append("  FuelAvaliabilityID: ").Append(FuelAvaliability).Append("\n");
            sb.Append("  Prize95: ").Append(Prize95).Append("\n");
            sb.Append("  Prize98: ").Append(Prize98).Append("\n");
            sb.Append("  PrizeLPG: ").Append(PrizeLPG).Append("\n");
            sb.Append("  PrizeDiesel: ").Append(PrizeDiesel).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  FuelGradeID: ").Append(FuelGrade.Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((History)obj);
        }

        /// <summary>
        /// Returns true if History instances are equal
        /// </summary>
        /// <param name="other">Instance of History to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(History other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Station == other.Station ||
                    Station != null &&
                    Station.Equals(other.Station)
                ) && 
                (
                    User == other.User ||
                    User != null &&
                    User.Equals(other.User)
                ) && 
                (
                    FuelAvaliability == other.FuelAvaliability ||
                    FuelAvaliability != null &&
                    FuelAvaliability.Equals(other.FuelAvaliability)
                ) && 
                (
                    Prize95 == other.Prize95 ||
                    Prize95 != null &&
                    Prize95.Equals(other.Prize95)
                ) && 
                (
                    Prize98 == other.Prize98 ||
                    Prize98 != null &&
                    Prize98.Equals(other.Prize98)
                ) && 
                (
                    PrizeLPG == other.PrizeLPG ||
                    PrizeLPG != null &&
                    PrizeLPG.Equals(other.PrizeLPG)
                ) && 
                (
                    PrizeDiesel == other.PrizeDiesel ||
                    PrizeDiesel != null &&
                    PrizeDiesel.Equals(other.PrizeDiesel)
                ) && 
                (
                    Date == other.Date ||
                    Date != null &&
                    Date.Equals(other.Date)
                ) && 
                (
                    FuelGrade == other.FuelGrade ||
                    FuelGrade != null &&
                    FuelGrade.Equals(other.FuelGrade)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Station != null)
                    hashCode = hashCode * 59 + Station.GetHashCode();
                    if (User != null)
                    hashCode = hashCode * 59 + User.GetHashCode();
                    if (FuelAvaliability != null)
                    hashCode = hashCode * 59 + FuelAvaliability.GetHashCode();
                    if (Prize95 != null)
                    hashCode = hashCode * 59 + Prize95.GetHashCode();
                    if (Prize98 != null)
                    hashCode = hashCode * 59 + Prize98.GetHashCode();
                    if (PrizeLPG != null)
                    hashCode = hashCode * 59 + PrizeLPG.GetHashCode();
                    if (PrizeDiesel != null)
                    hashCode = hashCode * 59 + PrizeDiesel.GetHashCode();
                    if (Date != null)
                    hashCode = hashCode * 59 + Date.GetHashCode();
                    if (FuelGrade != null)
                    hashCode = hashCode * 59 + FuelGrade.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(History left, History right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(History left, History right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
