/*
 * Aplikacja
 *
 * Społecznościowy system informowania o cenach paliw. 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using WebApplication2.Models;
using WebApplication2.Data;
using System.Linq;
using PSIM2.Security;
using Microsoft.EntityFrameworkCore;

namespace WebApplication2.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class CommentController : ControllerBase
    {
        private readonly WebApplication2Context _context;

        public CommentController(WebApplication2Context context)
        {
            _context = context;
        }
        /// <summary>
        /// Show Comment info
        /// </summary>
        /// <remarks>Pokazuje komentarz</remarks>
        /// <param name="commentID">ID komentarza do wyświetlenia</param>
        /// <param name="token">Token zalogowanego użytkownika</param>
        /// <response code="401">Not authenticated</response>
        /// <response code="0">successful operation</response>
        [HttpGet]
        [Route("/Comment/{commentID}")]
        public virtual IActionResult CommentCommentIDGet([FromRoute][Required] int? commentID, [FromHeader][Required()] string token)
        {
            long? requesterID;
            try
            {
                requesterID = (long?)TokenManager.VerifyToken(token)["userId"];
            }
            catch (Exception ex)
            {
                return StatusCode(401);
            }
            var comment = _context.Comment.Where(x => x.Id == commentID).FirstOrDefault();
            if (comment != null)
            {
                return StatusCode(200, comment);
            }
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);


            return StatusCode(404);
        }

        /// <summary>
        /// Edit comment
        /// </summary>
        /// <remarks>Zedytuj teskt komentarza.</remarks>
        /// <param name="commentID">ID komentarza do edycji</param>
        /// <param name="token">Token zalogowanego użytkownika</param>
        /// <param name="commentChange">Nowy tekst komentarza</param>
        /// <response code="401">Not authenticated</response>
        /// <response code="0">successful operation</response>
        [HttpPut]
        [Route("/comment/edit/{commentID}")]
        public virtual IActionResult CommentEditCommentIDPut([FromRoute][Required] int? commentID, [FromHeader][Required()] string token, [FromBody] CommentChange commentChange)
        {
            _context.Comment.Include(b => b.User).ToList();
            long? requesterID;
            try
            {
                requesterID = (long?)TokenManager.VerifyToken(token)["userId"];
            }
            catch (Exception ex)
            {
                return StatusCode(401);
            }
            var comment = _context.Comment.Where(x => x.Id == commentID).FirstOrDefault();
            if (comment!=null)
            {
                comment.Station = _context.Station.Where(x => x.Id == comment.Station.Id).FirstOrDefault();
                comment.User = _context.User.Where(x => x.Id == comment.User.Id).FirstOrDefault();
                comment.Text = commentChange.Text;
                _context.Comment.Update(comment);
                _context.SaveChanges();
                return StatusCode(0);
            }
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // 


            throw new NotImplementedException();
        }

        /// <summary>
        /// Post new comment
        /// </summary>
        /// <remarks>Wyślij nowy komentarz.</remarks>
        /// <param name="token">Token zalogowanego użytkownika</param>
        /// <param name="comment">Komentarz</param>
        /// <response code="401">Not authenticated</response>
        /// <response code="0">successful operation</response>
        [HttpPost]
        [Route("/comment")]

        public virtual IActionResult CommentPost([FromHeader][Required()] string token, [FromBody] Comment comment)
        {
            _context.Comment.Include(b => b.User).ToList();
            long? requesterID;
            try
            {
                requesterID = (long?)TokenManager.VerifyToken(token)["userId"];
            }
            catch (Exception ex)
            {
                return StatusCode(401);
            }
            if (ModelState.IsValid)
            {
                comment.Id = null;
                comment.Station = _context.Station.Where(x => x.Id == comment.Station.Id).FirstOrDefault();
                comment.User = _context.User.Where(x => x.Id == comment.User.Id).FirstOrDefault();
                _context.Add(comment);
                _context.SaveChanges();
                return StatusCode(0);
            }
            else return StatusCode(401);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // 


            throw new NotImplementedException();
        }

        /// <summary>
        /// Delete comment
        /// </summary>
        /// <remarks>Usuwa komentarz</remarks>
        /// <param name="commentID">ID komentarza do usnięcia</param>
        /// <param name="token">Token zalogowanego użytkownika</param>
        /// <response code="401">Not authenticated</response>
        /// <response code="0">successful operation</response>
        [HttpDelete]
        [Route("/comment/remove/{commentID}")]

        public virtual IActionResult CommentRemoveCommentIDDelete([FromRoute][Required] int? commentID, [FromHeader][Required()] string token)
        {
            _context.Comment.Include(b => b.User).ToList();
            long? requesterID;
            try
            {
                requesterID = (long?)TokenManager.VerifyToken(token)["userId"];
            }
            catch (Exception ex)
            {
                return StatusCode(401);
            }
            var com = _context.Comment.Find(commentID);
            if (com != null) {
                _context.Comment.Remove(com);
                _context.SaveChanges();
                return StatusCode(200);
            }
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);


            throw new NotImplementedException();
        }
    }

}
