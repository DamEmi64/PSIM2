/*
 * Aplikacja
 *
 * Społecznościowy system informowania o cenach paliw. 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using WebApplication2.Models;
using WebApplication2.Data;
using System.Linq;
using PSIM2.Security;

namespace WebApplication2.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class AuthorizationApiController : ControllerBase
    {

        private readonly WebApplication2Context _context;

        public AuthorizationApiController(WebApplication2Context context)
        {
            _context = context;
        }
        /// <summary>
        /// Log in and get a token
        /// </summary>
        /// <remarks> endpoint logowania - otwarcie strony logowania</remarks>
        /// <param name="login">Dane użytkownika</param>
        /// <response code="200">successful login operation</response>
        /// <response code="405">Invalid input</response>
        [HttpPost]
        [Route("/login")]
        [ValidateModelState]
        public virtual IActionResult Login([FromBody]Login login)
        {   
            if (login == null || login._Login == null || login._Login == null || login._Login == "" || login.Password == "")
            {
                return StatusCode(400, "Bad login details");
            }
            User user = _context.User.FirstOrDefault(user => user.Login == login._Login);
            string hash = PasswordManager.HashPassword(login.Password, 1001, 70);
            if (user == null || user.Password != hash) //for security reasons do not inform requester whether its wrong login or password
            {
                return StatusCode(404, "User not found");
            }
            else
            {
                string token = TokenManager.GenerateAccessToken(user.Id);
                Response.Headers.Add("token", token);
                return StatusCode(200, "Succesfully logged in");
            }
        }

        /// <summary>
        /// log out
        /// </summary>
        /// <remarks> endpoint wylogowania</remarks>
        /// <param name="token">token sesji</param>
        /// <response code="200">Sucessfull operation </response>
        [HttpDelete]
        [Route("/logout")]
        [ValidateModelState]
        public virtual IActionResult Logout([FromQuery][Required()]string token)
        {
            return StatusCode(200, "Succesfully logged out. It is done by frontend though...");
        }
    }
}
